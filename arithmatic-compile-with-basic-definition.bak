;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname arithmatic-compile-with-basic-definition) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))
;;basic-define:
(define-struct node(sym val))
(define sym-bank
  (list "+" "-" "*" "/" "expt" "max" "min" "abs" "exp"))


;;Pre-process:
(define (reform-wrap str)
  (reform (string->list str)))

(define (reform loc)
  (cond [(empty? loc) empty]
        [(or (char=? (first loc) #\space)
             (char=? (first loc) #\newline))
         (reform (rest loc))]
        [(or (char=? (first loc) #\()
             (char=? (first loc) #\)))
         (cons (list->string (cons (first loc) empty))
               (reform (rest loc)))]
        [else (cons (find-element loc)
                    (reform (cut-off loc)))]))

(define (find-element loc)
  (list->string (find-element-helper loc)))

(define (find-element-helper loc)
  (cond [(empty? loc) empty]
        [(char=? (first loc) #\space) empty]
        [(char=? (first loc) #\)) empty]
        [else (cons (first loc) (find-element-helper (rest loc)))]))

(define (cut-off loc)
  (cond [(empty? loc) empty]
        [(char=? (first loc) #\space) loc]
        [(char=? (first loc) #\)) loc]
        [else (cut-off (rest loc))]))


;;Tree Part:
(define (start-tree los)
  (cond [(empty? los) "no expression"]
        [(string=? (first los) "(") (create-func (rest los))]
        [(string=? (first los) ")") "expect a function or number, but find )"]
        [else (first los)]))

(define (tree-stream los)
  (cond [(empty? los) empty]
        [else (cons (start-tree los) (tree-stream (cutoff-2 (rest los) 1 0)))]))

(define (create-func los)
  (cond [(not (member? (first los) sym-bank))
         "invalid function call"]
        [(or (string=? (first los) "+")
             (string=? (first los) "*")
             (string=? (first los) "abs")
             (string=? (first los) "exp"))
         (cond [(string=? (second los) ")") "expect at least 1 argument"]
               [(string? (find-val (rest los))) (find-val (rest los))]
               [else (make-node (first los) (find-val (rest los)))])]
        [(or (string=? (first los) "-")
             (string=? (first los) "/"))
         (cond [(not (= (count-element (rest los) 1 0) 2)) "expect 2 arguments"]
               [(string? (find-val (rest los))) (find-val (rest los))]
               [else (make-node (first los) (find-val (rest los)))])]))

(define (find-val los)
  (cond [(empty? los) "expect right bracket"]
        [(string=? (first los) ")")
         empty]
        [(string=? (first los) "(")
         (cond [(not (string? (find-val (cutoff-2 (rest los) 1 0))))
               (cons (create-func (rest los))
                     (find-val (cutoff-2 (rest los) 1 0)))]
               [else (find-val (cutoff-2 (rest los) 1 0))])]
        [(equal? (string->number (first los)) false)
         "expect a number to be val"]
        [else
         (cond [(not (string? (find-val (rest los))))
                (cons (string->number (first los)) (find-val (rest los)))]
               [else (find-val (rest los))])]))

(define (cutoff-2 los left-num right-num)
  (cond [(empty? los) empty]
        [(= left-num right-num) los]
        [(string=? (first los) "(")
         (cutoff-2 (rest los) (add1 left-num) right-num)]
        [(string=? (first los) ")")
         (cutoff-2 (rest los) left-num (add1 right-num))]
        [else (cutoff-2 (rest los) left-num right-num)]))

(define (count-element los left-num right-num)
  (cond [(empty? los) 0]
        [(= left-num right-num) 0]
        [(string=? (first los) ")")
         (cond [(= left-num (+ 2 right-num))
                (add1 (count-element (rest los) left-num (add1 right-num)))]
               [else (count-element (rest los) left-num (add1 right-num))])]
        [(string=? (first los) "(") (count-element (rest los) (add1 left-num) right-num)]
        [(= left-num (+ 1 right-num)) (add1 (count-element (rest los) left-num right-num ))]
        [else (count-element (rest los) left-num right-num )]))


;;Main:
(define (produce-tree str)
  (start-tree (reform-wrap str)))
(define (produce-tlst str)
  (tree-stream (reform-wrap str)))


;;Tests:
(produce-tree "(+  3   4 (*  3 5  6) (+ 3 (+ 3 6) 5) (* 3 2 1))")
(produce-tlst "(+ 2 3) (+ 2 4) (+)")
(count-element (reform-wrap " 2 (+ (())) () (()()) 3") 1 0)
(count-element (reform-wrap ")") 1 0)
(produce-tree "(- 1 (+ 2 3))")